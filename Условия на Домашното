Условия на Домашното
Проект 1: Command Line Utilities - нечетни номера

Този проект представлява серия от инструменти с които ще се обработват текстови и бинарни файлове. Обработката на текстовите файловете ще включва филтриране на съдържанието по дадени критерии, търсене и сортиране. Ще има включени инструменти за четене и писане във файлове по зададени параметри. Инструментите ще са подходящо направени, така че да позволяват използването на няколко от тях едновременно върху едни данни (файл). Например прочитане на текстов файл и извеждане на всички редове от него, които съдържат определен низ, след което записване на получения резултат в друг файл или извеждане на конзолата.

Домашно 1. Напишете клас представящ филтър, който предоставя възможността да се чете вход от конзолата до край на файл ([ctrl] + D/Z). След това може да изведе последователно тези от прочетените редове, в които се съдържа избрана дума. Преценете какви член функции и член данни трябва да има този клас. Демонстрирайте използването му в кратка main функция.

Домашно 2. Напишете клас представящ подредена поредица от филтри (FilterChain). Класът ще трябва да може се инициализира с поток за писане и поток за четене. Класът предоставя възможност да се запише филтрираното съдържание от входния поток, преминало последователно през всички филтри, в изходния поток. Добавете подходящи методи за добавяне и премахване на филтрите от класа. Този клас трябва да може да се записва (сериализира) и чете (десериализира) от бинарен файл. Документирайте кода по подходящ начин (коментари + описания).

Домашно 3. В това домашно ще трябва да предефинирате изброените оператори за съответния клас, както поне още 4 които не са изброени за класа FilterChain.

За клас Filter, следните оператори:

operator=  - стандартен
operator== - сравнява два филтъра по стринга който филтрират
operator!= - обратното на ==
operator<< - записва низът за филтриране в поток (низ за филтриране - това което се филтрира от текста)
operator>> - чете си низът за филтриране от поток (низ за филтриране - това което се филтрира от текста)
operator+= - десен аргумент char добавя аргумента към края на низът за филтриране
operator+= - десен аргумент char* добавя дадения низ към края на низът за филтриране
operator|  - два аргумента Filter връща FilterChain съставен от аргументите си

За клас FilterChain, следните оператори:

operator=  - стандартен
operator== - сравнява само филтрите, но не и подредбата (равни FilterChain-ове дават еднакъв резултат при еднакъв вход)
operator!= - обратното на == (различни FilterChain-ове дават различен резултат при различен вход)
operator+= - добавя Filter към класа
operator|  - ляв аргумент FilterChain, десен - Filter - връща FilterChain с добавен десния аргумент
operator+  - два аргумента FilterChain - връща нов, с филтрите от аргументите без повторение
operator-= - десен аргумент char*, премахва всички филтри който филтрират подадения низ
operator[] - десен аргумент int връща филтър на позиция подаденото число
operator[] - десен аргумент char* връща филтър филтриращ подадения низ

Документирайте и подреждайте кода си.

Домашно 4. Сложете следните класове в подходяща йерархия с наследяване:

    WordFilter - досегашният филтър който пропуска редове които съдържат дадена дума
    EncodeFilter - криптира/кодира входен текстов файл по избран от вас начин
    DecodeFilter - декриптира/разкодира входен файл от направен с EncodeFilter
    CapitalizeFilter - променя първата буква на всяка дума в главна от входния текстов файл
    ZeroEscapeFilter
        работи върху бинарни файлове